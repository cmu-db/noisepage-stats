#!groovy

def getEnvFromBranch(branch){
  if(branch == 'staging'){
    return 'staging'
  } else if(branch == 'master'){
    return 'production'
  } else {
    return 'test'
  }
}

def dockerImage = ''
//def upstreamBuildCause = currentBuild.getBuildCauses('hudson.model.Cause$UpstreamCause')

pipeline {
  agent {
    label 'docker'
  }
  triggers {
    upstream(upstreamProjects: "noisepage-test-performance-storage-service/test", threshold: hudson.model.Result.SUCCESS)
  }
  stages{
    stage('Checkout'){
      when {
        anyOf {
          allOf {
            triggeredBy "UpstreamCause"
            branch "test"
          }
          branch "staging"
          branch "master"
        }
      }
      steps{
        checkout scm
      }
    }
    stage('Install Deployment Dependencies') {
      when {
        anyOf {
          allOf {
            triggeredBy "UpstreamCause"
            branch "test"
          }
          branch "staging"
          branch "master"
        }
      }
      steps {
        sh "sudo apt-add-repository ppa:ansible/ansible"
        sh "sudo apt-get -y install ansible"
      }
    }
    stage('Create Namespaces') {
      when {
        anyOf {
          allOf {
            triggeredBy "UpstreamCause"
            branch "test"
          }
          branch "staging"
          branch "master"
        }
      }
      steps {
        sh "ansible-playbook -i inventory playbooks/create-namespaces.yml -e \"env=${env.ENV}\""
      }
    }
    stage ('Deploy Apps'){
      when {
        anyOf {
          allOf {
            triggeredBy "UpstreamCause"
            branch "test"
          }
          branch "staging"
          branch "master"
        }
      }
      parallel {
        stage('Performance Storage Service') {
          steps{
            sh "ansible-playbook -i inventory playbooks/pss-deployment.yml -e \"env=${env.ENV}\""
          }
        }
      }
    }
  }
  post {
    cleanup{
      echo "deleting directory"
      deleteDir()
    }
  }
}
