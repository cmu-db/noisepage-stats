#!groovy

def getEnvFromBranch(branch){
  if (branch =='test'){
    return 'testing'
  } else if(branch == 'staging'){
    return 'staging'
  } else if(branch == 'master'){
    return 'production'
  }
}

def dockerImage = ''

pipeline {
  environment {
    ENV = getEnvFromBranch(env.BRANCH_NAME)
    REGISTRY = "cmudb/performance-storage-service"
    REGISTRY_CREDENTIAL = 'cmudb-dockerhub'
  }
  agent {
    label 'docker'
  }
  triggers {
    githubPush()
  }
  stages{
    stage('Checkout'){
      steps{
        checkout scm
      }
    }

    stage('Build'){
      steps{
        dir('performance-storage-service'){
          script{
            dockerImage = docker.build env.REGISTRY + ":${env.BUILD_ID}"
          }
        }
      }
    }

    stage('Test'){
      steps{
        dir('performance-storage-service'){
          sh "docker run -e SECRET_KEY=shhh --entrypoint python ${REGISTRY}:${env.BUILD_ID} manage.py jenkins --enable-coverage"
        }
      }
    }

    stage('Publish'){
      steps{
        script{
          dir('performance-storage-service'){
            docker.withRegistry('', env.REGISTRY_CREDENTIAL) {
                dockerImage.push("latest")
                dockerImage.push("${env.BUILD_ID}")
            }
          }
        }
      }
    }

    stage ('Deploy'){
      steps{
        dir('performance-storage-service'){
          sh "sudo apt-add-repository ppa:ansible/ansible"
          sh "sudo apt-get -y install ansible"
          sh "ansible-playbook -i inventory playbooks/deployment.yml -e \"env=${env.ENV} container_name=${env.REGISTRY}\""
        }
      }
    }
  }
  post {
    cleanup {
      echo "deleting directory"
      deleteDir()
      echo "removing docker image"
      sh "docker rmi ${env.REGISTRY}:${env.BUILD_ID}"
    }
  }
}
