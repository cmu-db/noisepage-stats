#!groovy
// def branches = [
//   test: 'testing',
//   staging: 'staging',
//   master: 'production'
// ]

def getEnvFromBranch(branch){
  if (branch =='test'){
    return 'testing'
  } else if(branch == 'staging'){
    return 'staging'
  } else if(branch == 'master'){
    return 'production'
  }
}

def dockerImage = ''

pipeline {
  environment {
    ENV = getEnvFromBranch(env.BRANCH_NAME)
    REGISTRY = "cmudb/performance-storage-service"
    REGISTRY_CREDENTIAL = 'cmudb-dockerhub'
     //should this be all caps cause its not a constant
  }
  agent {
    label:'macos'
    // docker {
    //   image 'docker'
    //   args '-v /var/run/docker.sock:/var/run/docker.sock'
    // }
  }
  stages{
    stage('Checkout'){
      steps{
        checkout scm

        //sh 'git log HEAD^..HEAD --pretty="%h %an - %s" > GIT_CHANGES'
        //def lastChanges = readFile('GIT_CHANGES')
      }
    }

    stage('Build'){
      steps{
        dir('performance-storage-service'){
          sh "pwd"
          script{
            dockerImage = docker.build env.REGISTRY + ":${env.BUILD_ID}"
          }
        }
      }
    }

    stage('Test'){
      steps{
        dir('performance-storage-service'){
          sh "docker run --entrypoint python ${dockerImage} manage.py jenkins --enable-coverage"
        // sh 'virtualenv env -p python3.7'
        // sh '. env/bin/activate'
        // sh 'pip install -r requirements.txt'
        // sh 'python3 manage.py test'
        // sh 'env/bin/deactivate'
        }
      }
    }

    stage('Publish'){
      steps{
        script{
          dir('performance-storage-service'){
            docker.withRegistry('', env.REGISTRY_CREDENTIAL) {
                dockerImage.push("latest")
                dockerImage.push("${env.BUILD_ID}")
            }
          }
        }
      }
    }

    stage ('Deploy'){
      steps{
        dir('performance-storage-service'){
          script {
            def image_id = env.REGISTRY + ":${env.BUILD_ID}"
          }
          sh "ansible-playbook -i inventory playbooks/deployment.yml -e env=${env.ENV} container_name=${env.REGISTRY}"
        }
      }
    }
  }
}
